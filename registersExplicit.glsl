

//declare variables we assume will be placed in registers
#if MAX_FRAGS > 0
LFB_FRAG_TYPE  frag0,frag1,frag2,frag3,frag4,frag5,frag6,frag7;
#endif
#if MAX_FRAGS > 8
LFB_FRAG_TYPE  frag8,frag9,frag10,frag11,frag12,frag13,frag14,frag15;
#endif
#if MAX_FRAGS > 16
LFB_FRAG_TYPE  frag16,frag17,frag18,frag19,frag20,frag21,frag22,frag23,frag24,frag25,frag26,frag27,frag28,frag29,frag30,frag31;
#endif

//initialize LFB fragment iteration
LFB_INIT(lfb, fragIndex);
LFB_ITER_BEGIN(lfb);

//load fragments into registers
#if MAX_FRAGS > 0
IF_FRAGS_8(LFB_ITER_CONDITION(lfb)) {fragCount = 1; frag0 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_8(LFB_ITER_CONDITION(lfb)) {fragCount = 2; frag1 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_8(LFB_ITER_CONDITION(lfb)) {fragCount = 3; frag2 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_8(LFB_ITER_CONDITION(lfb)) {fragCount = 4; frag3 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_8(LFB_ITER_CONDITION(lfb)) {fragCount = 5; frag4 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_8(LFB_ITER_CONDITION(lfb)) {fragCount = 6; frag5 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_8(LFB_ITER_CONDITION(lfb)) {fragCount = 7; frag6 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_8(LFB_ITER_CONDITION(lfb)) {fragCount = 8; frag7 = LFB_GET(lfb); LFB_ITER_INC(lfb);
#endif
#if MAX_FRAGS > 8
IF_FRAGS_16(LFB_ITER_CONDITION(lfb)) {fragCount = 9; frag8 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_16(LFB_ITER_CONDITION(lfb)) {fragCount = 10; frag9 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_16(LFB_ITER_CONDITION(lfb)) {fragCount = 11; frag10 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_16(LFB_ITER_CONDITION(lfb)) {fragCount = 12; frag11 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_16(LFB_ITER_CONDITION(lfb)) {fragCount = 13; frag12 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_16(LFB_ITER_CONDITION(lfb)) {fragCount = 14; frag13 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_16(LFB_ITER_CONDITION(lfb)) {fragCount = 15; frag14 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_16(LFB_ITER_CONDITION(lfb)) {fragCount = 16; frag15 = LFB_GET(lfb); LFB_ITER_INC(lfb);
#endif
#if MAX_FRAGS > 16
IF_FRAGS_32(LFB_ITER_CONDITION(lfb)) {fragCount = 17; frag16 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_32(LFB_ITER_CONDITION(lfb)) {fragCount = 18; frag17 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_32(LFB_ITER_CONDITION(lfb)) {fragCount = 19; frag18 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_32(LFB_ITER_CONDITION(lfb)) {fragCount = 20; frag19 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_32(LFB_ITER_CONDITION(lfb)) {fragCount = 21; frag20 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_32(LFB_ITER_CONDITION(lfb)) {fragCount = 22; frag21 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_32(LFB_ITER_CONDITION(lfb)) {fragCount = 23; frag22 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_32(LFB_ITER_CONDITION(lfb)) {fragCount = 24; frag23 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_32(LFB_ITER_CONDITION(lfb)) {fragCount = 25; frag24 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_32(LFB_ITER_CONDITION(lfb)) {fragCount = 26; frag25 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_32(LFB_ITER_CONDITION(lfb)) {fragCount = 27; frag26 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_32(LFB_ITER_CONDITION(lfb)) {fragCount = 28; frag27 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_32(LFB_ITER_CONDITION(lfb)) {fragCount = 29; frag28 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_32(LFB_ITER_CONDITION(lfb)) {fragCount = 30; frag29 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_32(LFB_ITER_CONDITION(lfb)) {fragCount = 31; frag30 = LFB_GET(lfb); LFB_ITER_INC(lfb);
IF_FRAGS_32(LFB_ITER_CONDITION(lfb)) {fragCount = 32; frag31 = LFB_GET(lfb); LFB_ITER_INC(lfb);
#endif

//end early-out fragment loading
#if MAX_FRAGS > 0
}}}}}}}}
#endif
#if MAX_FRAGS > 8
}}}}}}}}
#endif
#if MAX_FRAGS > 16
}}}}}}}}}}}}}}}}
#endif

#if !REGISTERS_DISABLE_SORTING

#if !REGISTERS_SORT_BITONIC

/*
  _                  _   _          
 (_)_ _  ___ ___ _ _| |_(_)___ _ _  
 | | ' \(_-</ -_) '_|  _| / _ \ ' \ 
 |_|_||_/__/\___|_|  \__|_\___/_||_|
 sort fragments using an insertion sort network

*/

#if MAX_FRAGS > 0
IF_FRAGS_8(fragCount > 1) {SWAP_INS(0,1)}
IF_FRAGS_8(fragCount > 2) {SWAP_INS(1,2)SWAP_INS(0,1)}}
IF_FRAGS_8(fragCount > 3) {SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}
IF_FRAGS_8(fragCount > 4) {SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}
IF_FRAGS_8(fragCount > 5) {SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}
IF_FRAGS_8(fragCount > 6) {SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}
IF_FRAGS_8(fragCount > 7) {SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}
#endif
#if MAX_FRAGS > 8
IF_FRAGS_16(fragCount > 8) {SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}
IF_FRAGS_16(fragCount > 9) {SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}
IF_FRAGS_16(fragCount > 10) {SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}
IF_FRAGS_16(fragCount > 11) {SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}
IF_FRAGS_16(fragCount > 12) {SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}
IF_FRAGS_16(fragCount > 13) {SWAP_INS(12,13)SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}}
IF_FRAGS_16(fragCount > 14) {SWAP_INS(13,14)SWAP_INS(12,13)SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}}}
IF_FRAGS_16(fragCount > 15) {SWAP_INS(14,15)SWAP_INS(13,14)SWAP_INS(12,13)SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}}}}
#endif
#if MAX_FRAGS > 16
IF_FRAGS_32(fragCount > 16) {SWAP_INS(15,16)SWAP_INS(14,15)SWAP_INS(13,14)SWAP_INS(12,13)SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}}}}}
IF_FRAGS_32(fragCount > 17) {SWAP_INS(16,17)SWAP_INS(15,16)SWAP_INS(14,15)SWAP_INS(13,14)SWAP_INS(12,13)SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}}}}}}
IF_FRAGS_32(fragCount > 18) {SWAP_INS(17,18)SWAP_INS(16,17)SWAP_INS(15,16)SWAP_INS(14,15)SWAP_INS(13,14)SWAP_INS(12,13)SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}}}}}}}
IF_FRAGS_32(fragCount > 19) {SWAP_INS(18,19)SWAP_INS(17,18)SWAP_INS(16,17)SWAP_INS(15,16)SWAP_INS(14,15)SWAP_INS(13,14)SWAP_INS(12,13)SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}}}}}}}}
IF_FRAGS_32(fragCount > 20) {SWAP_INS(19,20)SWAP_INS(18,19)SWAP_INS(17,18)SWAP_INS(16,17)SWAP_INS(15,16)SWAP_INS(14,15)SWAP_INS(13,14)SWAP_INS(12,13)SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}}}}}}}}}
IF_FRAGS_32(fragCount > 21) {SWAP_INS(20,21)SWAP_INS(19,20)SWAP_INS(18,19)SWAP_INS(17,18)SWAP_INS(16,17)SWAP_INS(15,16)SWAP_INS(14,15)SWAP_INS(13,14)SWAP_INS(12,13)SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}}}}}}}}}}
IF_FRAGS_32(fragCount > 22) {SWAP_INS(21,22)SWAP_INS(20,21)SWAP_INS(19,20)SWAP_INS(18,19)SWAP_INS(17,18)SWAP_INS(16,17)SWAP_INS(15,16)SWAP_INS(14,15)SWAP_INS(13,14)SWAP_INS(12,13)SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}}}}}}}}}}}
IF_FRAGS_32(fragCount > 23) {SWAP_INS(22,23)SWAP_INS(21,22)SWAP_INS(20,21)SWAP_INS(19,20)SWAP_INS(18,19)SWAP_INS(17,18)SWAP_INS(16,17)SWAP_INS(15,16)SWAP_INS(14,15)SWAP_INS(13,14)SWAP_INS(12,13)SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}}}}}}}}}}}}
IF_FRAGS_32(fragCount > 24) {SWAP_INS(23,24)SWAP_INS(22,23)SWAP_INS(21,22)SWAP_INS(20,21)SWAP_INS(19,20)SWAP_INS(18,19)SWAP_INS(17,18)SWAP_INS(16,17)SWAP_INS(15,16)SWAP_INS(14,15)SWAP_INS(13,14)SWAP_INS(12,13)SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}}}}}}}}}}}}}
IF_FRAGS_32(fragCount > 25) {SWAP_INS(24,25)SWAP_INS(23,24)SWAP_INS(22,23)SWAP_INS(21,22)SWAP_INS(20,21)SWAP_INS(19,20)SWAP_INS(18,19)SWAP_INS(17,18)SWAP_INS(16,17)SWAP_INS(15,16)SWAP_INS(14,15)SWAP_INS(13,14)SWAP_INS(12,13)SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}}}}}}}}}}}}}}
IF_FRAGS_32(fragCount > 26) {SWAP_INS(25,26)SWAP_INS(24,25)SWAP_INS(23,24)SWAP_INS(22,23)SWAP_INS(21,22)SWAP_INS(20,21)SWAP_INS(19,20)SWAP_INS(18,19)SWAP_INS(17,18)SWAP_INS(16,17)SWAP_INS(15,16)SWAP_INS(14,15)SWAP_INS(13,14)SWAP_INS(12,13)SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}}}}}}}}}}}}}}}
IF_FRAGS_32(fragCount > 27) {SWAP_INS(26,27)SWAP_INS(25,26)SWAP_INS(24,25)SWAP_INS(23,24)SWAP_INS(22,23)SWAP_INS(21,22)SWAP_INS(20,21)SWAP_INS(19,20)SWAP_INS(18,19)SWAP_INS(17,18)SWAP_INS(16,17)SWAP_INS(15,16)SWAP_INS(14,15)SWAP_INS(13,14)SWAP_INS(12,13)SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}}}}}}}}}}}}}}}}
IF_FRAGS_32(fragCount > 28) {SWAP_INS(27,28)SWAP_INS(26,27)SWAP_INS(25,26)SWAP_INS(24,25)SWAP_INS(23,24)SWAP_INS(22,23)SWAP_INS(21,22)SWAP_INS(20,21)SWAP_INS(19,20)SWAP_INS(18,19)SWAP_INS(17,18)SWAP_INS(16,17)SWAP_INS(15,16)SWAP_INS(14,15)SWAP_INS(13,14)SWAP_INS(12,13)SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}}}}}}}}}}}}}}}}}
IF_FRAGS_32(fragCount > 29) {SWAP_INS(28,29)SWAP_INS(27,28)SWAP_INS(26,27)SWAP_INS(25,26)SWAP_INS(24,25)SWAP_INS(23,24)SWAP_INS(22,23)SWAP_INS(21,22)SWAP_INS(20,21)SWAP_INS(19,20)SWAP_INS(18,19)SWAP_INS(17,18)SWAP_INS(16,17)SWAP_INS(15,16)SWAP_INS(14,15)SWAP_INS(13,14)SWAP_INS(12,13)SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
IF_FRAGS_32(fragCount > 30) {SWAP_INS(29,30)SWAP_INS(28,29)SWAP_INS(27,28)SWAP_INS(26,27)SWAP_INS(25,26)SWAP_INS(24,25)SWAP_INS(23,24)SWAP_INS(22,23)SWAP_INS(21,22)SWAP_INS(20,21)SWAP_INS(19,20)SWAP_INS(18,19)SWAP_INS(17,18)SWAP_INS(16,17)SWAP_INS(15,16)SWAP_INS(14,15)SWAP_INS(13,14)SWAP_INS(12,13)SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
IF_FRAGS_32(fragCount > 31) {SWAP_INS(30,31)SWAP_INS(29,30)SWAP_INS(28,29)SWAP_INS(27,28)SWAP_INS(26,27)SWAP_INS(25,26)SWAP_INS(24,25)SWAP_INS(23,24)SWAP_INS(22,23)SWAP_INS(21,22)SWAP_INS(20,21)SWAP_INS(19,20)SWAP_INS(18,19)SWAP_INS(17,18)SWAP_INS(16,17)SWAP_INS(15,16)SWAP_INS(14,15)SWAP_INS(13,14)SWAP_INS(12,13)SWAP_INS(11,12)SWAP_INS(10,11)SWAP_INS(9,10)SWAP_INS(8,9)SWAP_INS(7,8)SWAP_INS(6,7)SWAP_INS(5,6)SWAP_INS(4,5)SWAP_INS(3,4)SWAP_INS(2,3)SWAP_INS(1,2)SWAP_INS(0,1)}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
#endif

//end early-out insertion sort
#if MAX_FRAGS > 0
}}}}}}}
#endif
#if MAX_FRAGS > 8
}}}}}}}}
#endif
#if MAX_FRAGS > 16
}}}}}}}}}}}}}}}}
#endif

#else // (!REGISTERS_SORT_BITONIC)

/*
  _    _ _            _    
 | |__(_) |_ ___ _ _ (_)__ 
 | '_ \ |  _/ _ \ ' \| / _|
 |_.__/_|\__\___/_||_|_\__|
 sort fragments using a bitonic sort network

*/

//fill empty depths with inf
const float inf_depth = 9999.0;
#if MAX_FRAGS > 0
if (fragCount < 1) LFB_FRAG_DEPTH(frag0) = inf_depth;
if (fragCount < 2) LFB_FRAG_DEPTH(frag1) = inf_depth;
if (fragCount < 3) LFB_FRAG_DEPTH(frag2) = inf_depth;
if (fragCount < 4) LFB_FRAG_DEPTH(frag3) = inf_depth;
if (fragCount < 5) LFB_FRAG_DEPTH(frag4) = inf_depth;
if (fragCount < 6) LFB_FRAG_DEPTH(frag5) = inf_depth;
if (fragCount < 7) LFB_FRAG_DEPTH(frag6) = inf_depth;
if (fragCount < 8) LFB_FRAG_DEPTH(frag7) = inf_depth;
#endif
#if MAX_FRAGS > 8
if (fragCount < 9) LFB_FRAG_DEPTH(frag8) = inf_depth;
if (fragCount < 10) LFB_FRAG_DEPTH(frag9) = inf_depth;
if (fragCount < 11) LFB_FRAG_DEPTH(frag10) = inf_depth;
if (fragCount < 12) LFB_FRAG_DEPTH(frag11) = inf_depth;
if (fragCount < 13) LFB_FRAG_DEPTH(frag12) = inf_depth;
if (fragCount < 14) LFB_FRAG_DEPTH(frag13) = inf_depth;
if (fragCount < 15) LFB_FRAG_DEPTH(frag14) = inf_depth;
if (fragCount < 16) LFB_FRAG_DEPTH(frag15) = inf_depth;
#endif
#if MAX_FRAGS > 16
if (fragCount < 17) LFB_FRAG_DEPTH(frag16) = inf_depth;
if (fragCount < 18) LFB_FRAG_DEPTH(frag17) = inf_depth;
if (fragCount < 19) LFB_FRAG_DEPTH(frag18) = inf_depth;
if (fragCount < 20) LFB_FRAG_DEPTH(frag19) = inf_depth;
if (fragCount < 21) LFB_FRAG_DEPTH(frag20) = inf_depth;
if (fragCount < 22) LFB_FRAG_DEPTH(frag21) = inf_depth;
if (fragCount < 23) LFB_FRAG_DEPTH(frag22) = inf_depth;
if (fragCount < 24) LFB_FRAG_DEPTH(frag23) = inf_depth;
if (fragCount < 25) LFB_FRAG_DEPTH(frag24) = inf_depth;
if (fragCount < 26) LFB_FRAG_DEPTH(frag25) = inf_depth;
if (fragCount < 27) LFB_FRAG_DEPTH(frag26) = inf_depth;
if (fragCount < 28) LFB_FRAG_DEPTH(frag27) = inf_depth;
if (fragCount < 29) LFB_FRAG_DEPTH(frag28) = inf_depth;
if (fragCount < 30) LFB_FRAG_DEPTH(frag29) = inf_depth;
if (fragCount < 31) LFB_FRAG_DEPTH(frag30) = inf_depth;
if (fragCount < 32) LFB_FRAG_DEPTH(frag31) = inf_depth;
#endif

//bitonic sort network

SWAP(0,1);SWAP(3,2);SWAP(4,5);SWAP(7,6);			
#if MAX_FRAGS > 8
SWAP(8,9);SWAP(11,10);SWAP(12,13);SWAP(15,14);			
#if MAX_FRAGS > 16
SWAP(16,17);SWAP(19,18);SWAP(20,21);SWAP(23,22);SWAP(24,25);SWAP(27,26);SWAP(28,29);SWAP(31,30);
#endif
#endif
SWAP(0,2);SWAP(1,3);SWAP(6,4);SWAP(7,5);			
#if MAX_FRAGS > 8
SWAP(8,10);SWAP(9,11);SWAP(14,12);SWAP(15,13);			
#if MAX_FRAGS > 16
SWAP(16,18);SWAP(17,19);SWAP(22,20);SWAP(23,21);SWAP(24,26);SWAP(25,27);SWAP(30,28);SWAP(31,29);
#endif
#endif
SWAP(0,1);SWAP(2,3);SWAP(5,4);SWAP(7,6);			
#if MAX_FRAGS > 8
SWAP(8,9);SWAP(10,11);SWAP(13,12);SWAP(15,14);			
#if MAX_FRAGS > 16
SWAP(16,17);SWAP(18,19);SWAP(21,20);SWAP(23,22);SWAP(24,25);SWAP(26,27);SWAP(29,28);SWAP(31,30);
#endif
#endif
SWAP(0,4);SWAP(1,5);SWAP(2,6);SWAP(3,7);			
#if MAX_FRAGS > 8
SWAP(12,8);SWAP(13,9);SWAP(14,10);SWAP(15,11);			
#if MAX_FRAGS > 16
SWAP(16,20);SWAP(17,21);SWAP(18,22);SWAP(19,23);SWAP(28,24);SWAP(29,25);SWAP(30,26);SWAP(31,27);
#endif
#endif
SWAP(0,2);SWAP(1,3);SWAP(4,6);SWAP(5,7);			
#if MAX_FRAGS > 8
SWAP(10,8);SWAP(11,9);SWAP(14,12);SWAP(15,13);			
#if MAX_FRAGS > 16
SWAP(16,18);SWAP(17,19);SWAP(20,22);SWAP(21,23);SWAP(26,24);SWAP(27,25);SWAP(30,28);SWAP(31,29);
#endif
#endif
SWAP(0,1);SWAP(2,3);SWAP(4,5);SWAP(6,7);			
#if MAX_FRAGS > 8
SWAP(9,8);SWAP(11,10);SWAP(13,12);SWAP(15,14);			
#if MAX_FRAGS > 16
SWAP(16,17);SWAP(18,19);SWAP(20,21);SWAP(22,23);SWAP(25,24);SWAP(27,26);SWAP(29,28);SWAP(31,30);
#endif
#endif

#if MAX_FRAGS > 8
SWAP(0,8);SWAP(1,9);SWAP(2,10);SWAP(3,11);SWAP(4,12);SWAP(5,13);SWAP(6,14);SWAP(7,15);			
#if MAX_FRAGS > 16
SWAP(24,16);SWAP(25,17);SWAP(26,18);SWAP(27,19);SWAP(28,20);SWAP(29,21);SWAP(30,22);SWAP(31,23);
#endif
SWAP(0,4);SWAP(1,5);SWAP(2,6);SWAP(3,7);SWAP(8,12);SWAP(9,13);SWAP(10,14);SWAP(11,15);			
#if MAX_FRAGS > 16
SWAP(20,16);SWAP(21,17);SWAP(22,18);SWAP(23,19);SWAP(28,24);SWAP(29,25);SWAP(30,26);SWAP(31,27);
#endif
SWAP(0,2);SWAP(1,3);SWAP(4,6);SWAP(5,7);SWAP(8,10);SWAP(9,11);SWAP(12,14);SWAP(13,15);			
#if MAX_FRAGS > 16
SWAP(18,16);SWAP(19,17);SWAP(22,20);SWAP(23,21);SWAP(26,24);SWAP(27,25);SWAP(30,28);SWAP(31,29);
#endif
SWAP(0,1);SWAP(2,3);SWAP(4,5);SWAP(6,7);SWAP(8,9);SWAP(10,11);SWAP(12,13);SWAP(14,15);			
#if MAX_FRAGS > 16
SWAP(17,16);SWAP(19,18);SWAP(21,20);SWAP(23,22);SWAP(25,24);SWAP(27,26);SWAP(29,28);SWAP(31,30);
#endif

#if MAX_FRAGS > 16
SWAP(0,16);SWAP(1,17);SWAP(2,18);SWAP(3,19);SWAP(4,20);SWAP(5,21);SWAP(6,22);SWAP(7,23);SWAP(8,24);SWAP(9,25);SWAP(10,26);SWAP(11,27);SWAP(12,28);SWAP(13,29);SWAP(14,30);SWAP(15,31);
SWAP(0,8);SWAP(1,9);SWAP(2,10);SWAP(3,11);SWAP(4,12);SWAP(5,13);SWAP(6,14);SWAP(7,15);SWAP(16,24);SWAP(17,25);SWAP(18,26);SWAP(19,27);SWAP(20,28);SWAP(21,29);SWAP(22,30);SWAP(23,31);
SWAP(0,4);SWAP(1,5);SWAP(2,6);SWAP(3,7);SWAP(8,12);SWAP(9,13);SWAP(10,14);SWAP(11,15);SWAP(16,20);SWAP(17,21);SWAP(18,22);SWAP(19,23);SWAP(24,28);SWAP(25,29);SWAP(26,30);SWAP(27,31);
SWAP(0,2);SWAP(1,3);SWAP(4,6);SWAP(5,7);SWAP(8,10);SWAP(9,11);SWAP(12,14);SWAP(13,15);SWAP(16,18);SWAP(17,19);SWAP(20,22);SWAP(21,23);SWAP(24,26);SWAP(25,27);SWAP(28,30);SWAP(29,31);
SWAP(0,1);SWAP(2,3);SWAP(4,5);SWAP(6,7);SWAP(8,9);SWAP(10,11);SWAP(12,13);SWAP(14,15);SWAP(16,17);SWAP(18,19);SWAP(20,21);SWAP(22,23);SWAP(24,25);SWAP(26,27);SWAP(28,29);SWAP(30,31);

#endif // MAX_FRAGS > 8
#endif // MAX_FRAGS > 16


#endif // !REGISTERS_SORT_BITONIC

#endif // !REGISTERS_DISABLE_SORTING

//blend fragments
#if MAX_FRAGS > 16
BLEND(31);BLEND(30);BLEND(29);BLEND(28);BLEND(27);BLEND(26);BLEND(25);BLEND(24);BLEND(23);BLEND(22);BLEND(21);BLEND(20);BLEND(19);BLEND(18);BLEND(17);BLEND(16);
#endif
#if MAX_FRAGS > 8
BLEND(15);BLEND(14);BLEND(13);BLEND(12);BLEND(11);BLEND(10);BLEND(9);BLEND(8);
#endif
#if MAX_FRAGS > 0
BLEND(7);BLEND(6);BLEND(5);BLEND(4);BLEND(3);BLEND(2);BLEND(1);BLEND(0);
#endif



